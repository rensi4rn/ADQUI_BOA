CREATE OR REPLACE FUNCTION migracion.f_trans_tpm_financiador_tfinanciador (
			  v_operacion varchar,p_codigo_financiador varchar,p_id_financiador int4,p_id_usuario int4,p_descripcion_financiador text,p_fecha_registro date,p_fecha_ultima_modificacion date,p_hora_registro time,p_hora_ultima_modificacion time,p_id_financiador_actif int4,p_nombre_financiador varchar)
			RETURNS varchar [] AS
			$BODY$

DECLARE
			 
			g_registros record;
			v_consulta varchar;
			v_res_cone  varchar;
			v_cadena_cnx varchar;
			v_cadena_con varchar;
			resp boolean;
			 v_respuesta varchar[];
			
			g_registros_resp record;
			v_codigo_financiador varchar;
			v_id_financiador int4;
			v_descripcion_financiador text;
			v_estado_reg varchar;
			v_fecha_mod timestamp;
			v_fecha_reg timestamp;
			v_id_financiador_actif int4;
			v_id_usuario_mod int4;
			v_id_usuario_reg int4;
			v_nombre_financiador varchar;
BEGIN
			
			
			          --funcion para obtener cadena de conexion
			          v_cadena_cnx =  migracion.f_obtener_cadena_con_dblink();
			          
			          
			           ---------------------------------------
			           --previamente se tranforman los datos  (descomentar)
			           ---------------------------------------

			           /*
			           			v_codigo_financiador=p_::varchar;
			v_id_financiador=p_id_financiador::int4;
			v_descripcion_financiador=p_::text;
			v_estado_reg=p_::varchar;
			v_fecha_mod=p_::timestamp;
			v_fecha_reg=p_::timestamp;
			v_id_financiador_actif=p_::int4;
			v_id_usuario_mod=p_::int4;
			v_id_usuario_reg=p_::int4;
			v_nombre_financiador=p_::varchar;
 */   
			    --cadena para la llamada a la funcion de insercion en la base de datos destino
			      
			        
			          v_consulta = 'select migra.f__on_trig_tpm_financiador_tfinanciador (
			               '''||v_operacion::varchar||''','||COALESCE(''''||v_codigo_financiador::varchar||'''','NULL')||','||COALESCE(v_id_financiador::varchar,'NULL')||','||COALESCE(''''||v_descripcion_financiador::varchar||'''','NULL')||','||COALESCE(''''||v_estado_reg::varchar||'''','NULL')||','||COALESCE(''''||v_fecha_mod::varchar||'''','NULL')||','||COALESCE(''''||v_fecha_reg::varchar||'''','NULL')||','||COALESCE(v_id_financiador_actif::varchar,'NULL')||','||COALESCE(v_id_usuario_mod::varchar,'NULL')||','||COALESCE(v_id_usuario_reg::varchar,'NULL')||','||COALESCE(''''||v_nombre_financiador::varchar||'''','NULL')||')';
			          --probar la conexion con dblink
			          resp =  sss.f_probar_con_dblink(v_cadena_cnx);
			            
			             IF(not resp) THEN
			            
			             	--modificar bandera de fallo  
			                 raise exception 'FALLA CONEXION A LA BASE DE DATOS CON DBLINK';
			                 
			             ELSE
			               PERFORM * FROM dblink(v_consulta,true) AS ( xx varchar);
			                v_res_cone=(select dblink_disconnect());
			             END IF;
			            
			            v_respuesta[1]='TRUE';
                       
			           RETURN v_respuesta;
			EXCEPTION
			   WHEN others THEN
			     v_respuesta[1]='FALSE';
                 v_respuesta[2]=SQLERRM;
                 v_respuesta[3]=SQLSTATE;
                 
    
                 
                 RETURN v_respuesta;
			
			END;
			$BODY$

LANGUAGE 'plpgsql'
			VOLATILE
			CALLED ON NULL INPUT
			SECURITY INVOKER;